(sapply(data, table(is.na)))
sapply(data, summary
)
View(data)
unique(data$user_name)
unique(data$classe)
sapply(data, function (X){table(is.na(x))})
sapply(data, function (x){table(is.na(x))})
sapply(data, function (x){any(is.na(x))return(x)})
sapply(data, function (x){any(is.na(x))})
data.na <- data[,any(is.na)==TRUE]
data.na <- data[,any(is.na(data))==TRUE]
View(data.na)
vector.na<-sapply(data, function (x){any(is.na(x))})
vector.na<- vector.na == "TRUE"
vector.na<- vector.na == TRUE
vector.na
vector.na -- TRUE
vector.na[vector.na -- TRUE]
vector.na[1]
vector.na[2]
vector.na[vector.na==TRUE]
var.na <- vector.na[vector.na==TRUE]
data.na <- data %>% select(names(var.na))
View(data.na)
View(data)
data.na <- data %>% select(1:2,names(var.na))
View(data.na)
data.var <- read_csv("pml-testing.csv", na = c("NA","#DIV/0!","Inf","-Inf",""))
View(data.var)
?train
names(getModelInfo())
getModelInfo("rPart")
getModelInfo("rpart")
vector.na<-sapply(data, function(x){!any(is.na(x)})
vector.na<-sapply(data, function(x){!any(is.na(x)})
vector.na<-sapply(data, function(x){!any(is.na(x))})
data.var1<-data.var[,vector.na]
View(data.var1)
data.narm <- data[,vector.na]
View(data.narm)
View(data.var)
View(data)
data.narm <- data[,c(vector.na, "classe"]
data.narm <- data[,c(vector.na, "classe")]
data.narm <- data[,vector.na]
data.narm$classe <- data$classe
View(data.narm)
data.narm$classe
View(data.narm)
data.narm <- data[,names(vector.na)]
names(na.rm)
names(vector.na)
rm(list =ls)
rm(list=ls())
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na <- sapply(data.var, function(x){all(is.na(x))})
test <- data[,vector.na]
View(test)
test <- data.var[,vector.na]
View(test)
vector.na.rm <- sapply(data.var, function(x){!all(is.na(x))})
rm(list-"vector.na")
rm(list-vector.na)
rm(list-c("vector.na")
)
rm(list-vector.na)
rm(list="vector.na)
rm(list="vector.na")
test<-data.var[,vector.na.rm]
test<-data[,vector.na.rm]
test<-data[,names(vector.na.rm)]
rm(list="test")
data.na.rm <- data[,vector.na.rm]
View(data.na.rm)
sapply(data.na.rm, function(x){table(is.na(x))})
is.na(data.na.rm)
table(is.na(data.na.rm))
inTrain <- createDataPartition(data.na.rm, p = 0.75)
?createDataPartition
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75)
training <- data.na.rm[inTrain]
training <- data.na.rm[inTrain,]
View(inTrain)
training <- data.na.rm[inTrain[1],]
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75)
inTrain[1]
training <- data.na.rm[inTrain[1],]
inTrain[1]
inTrain
training <- data.na.rm[inTrain$Resample1,]
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
?train
model.rf <- train(classe ~ ., method = "rf")
model.rf <- train(classe ~ ., data = training, method = "rf")
View(data)
View(data.na.rm)
View(data.var)
?table
?tidyr
model.rf <- train(classe ~ ., data = training, method = "rf", preProcess = "pca")
install.packages("e1071")
model.rf <- train(classe ~ ., data = training, method = "rf", preProcess = "pca")
library(randomForest)
?train
model.rf <- train(classe ~ ., data = training, method = "rf", preProcess = "pca")
model.rf <- train(classe ~ ., data = training, method = "rf")
?preProcess
## Train for PCA
training.pca.start <- training[,-"class"]
## Train for PCA
training.pca.start <- training[,-"classe"]
## Train for PCA
training.pca.start <- training[,-60]
View(training.pca.start)
## Subset for PCA
training.pca.start <- training[[-"classe"]]
## Subset for PCA
training.pca.start <- training[,"classe"]
## Subset for PCA
training.pca.start <- training[,-"classe"]
## Subset for PCA
training.pca.start <- training[,-training$classe]
## Subset for PCA
training.pca.start <- select(training, -classe)
testing.pca.start <- select(training, -classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, thresh = 0.8)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, data = training.pca.start)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
View(training.pca.fin)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, thresh = 0.8)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
View(training.pca.fin)
View(training)
## Subset for PCA
training.pca.start <- select(training,-(1:4), -classe)
testing.pca.start <- select(training, -(1:4),-classe)
View(testing.pca.start)
testing.pca.start <- select(testing, -(1:4),-classe)
## Subset for PCA
training.pca.start <- select(training,-(1:4), -classe)
View(testing.pca.start)
## Subset for PCA
training.pca.start <- select(training,-1:-4, -classe)
testing.pca.start <- select(testing, -1:-4,-classe)
View(training.pca.start)
View(training)
## Subset for PCA
training.pca.start <- select(training,-1:-7, -classe)
testing.pca.start <- select(testing, -1:-7,-classe)
View(testing.pca.start)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, thresh = 0.8)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
View(training.pca.fin)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca", thresh = 0.8)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
View(training.pca.fin)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca", thresh = 0.95)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
View(training.pca.fin)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca", thresh = 0.90)
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, training$classe)
classe
View(testing)
testing.processed <- cbind(testing.pca.fin, testing$classe)
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.rf <- train(classe ~ ., data = training.processed, method = "rf", )
View(training.processed)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
View(training.processed)
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.rf <- train(classe ~ ., data = training.processed, method = "rf", )
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.rf <- train(classe ~ ., data = training.processed, method = "rf" )
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
model.gbm <- train(classe ~ ., data = training.processed, method = "gbm" )
## Make Predictions
predict.train.lda <- predict(model.lda, newdata = training.processed)
## Make Predictions
predict.test.lda <- predict(model.lda, newdata = test.processed)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Make Predictions
predict.test.lda <- predict(model.lda, newdata = testing.processed)
## Compare against actuals
confusionMatrix(predict.test.lda, testing.processed$classe)
model.rf <- train(classe ~ ., data = training.processed, method = "rf" )
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.na.rm <- data[,vector.na.rm]
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75)
training <- data.na.rm[inTrain,]
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
## Subset for PCA
training.pca.start <- select(training,-1:-7, -classe)
testing.pca.start <- select(testing, -1:-7,-classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca")
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
## Make Predictions
predict.test.lda <- predict(model.lda, newdata = testing.processed)
## Compare against actuals
confusionMatrix(predict.test.lda, testing.processed$classe)
View(testing.processed)
View(testing.processed)
View(training.pca.fin)
View(training)
View(testing)
data.na.rm <- data %>% select(vector.na.rm)
data.na.rm <- data %>% select(names(vector.na.rm)
data.na.rm <- data %>% select(names(vector.na.rm))
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
data.na.rm <- data.na.rm %>% select(-1:-7)
View(data.na.rm)
View(data.na.rm)
View(data)
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
data.na.rm <- data.na.rm %>% select(-1:-7)
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
## Subset for PCA
training.pca.start <- select(training, -classe)
testing.pca.start <- select(testing,-classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca")
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Train Random Forest, LDA, and Boosted Models
### Incorporate PCA
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
## Make Predictions
predict.test.lda <- predict(model.lda, newdata = testing.processed)
## Compare against actuals
confusionMatrix(predict.test.lda, testing.processed$classe)
model.gbm <- train(classe ~ ., data = training.processed, method = "gbm" )
model.gbm <- train(classe ~ ., data = training.processed, method = "gbm", verbose = FALSE )
View(training.processed)
model.glm <- train(classe ~ ., data = training.processed, method = "glm")
?rpart
model.rpart <- train(classe ~ ., data = training.processed, method = "rpart"
model.rpart <- train(classe ~ ., data = training.processed, method = "rpart")
confusionMatrix(predict.test.rpart, testing.processed$classe)
predict.test.rpart <- predict(model.rpart, newdata = testing.processed)
confusionMatrix(predict.test.rpart, testing.processed$classe)
model.gbm <- train(classe ~ ., data = training.processed, method = "gbm", verbose = FALSE )
View(training)
hist(training[[1]])
hist(training[[2]])
hist(training[[3]])
hist(training[[4]])
hist(training[[5]])
hist(training[[6]])
hist(training[[7]])
preProcess.PCA <- preProcess(training.pca.start, method = "boxcox")
preProcess.PCA <- preProcess(training.pca.start, method = "BoxCox")
View(training.pca.start)
str(training.pca.start)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "BoxCox")
View(training.pca.start)
hist(training[[7]])
hist(training[[6]])
hist(training[[5]])
hist(training[[4]])
hist(training[[2]])
hist(training[[3]])
model.gbm <- train(classe ~ ., data = training.processed, method = "gbm", verbose = FALSE )
?train
model.rf <- randomForest(classe ~., data = training.prcessed, n.tree = 100)
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 100)
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 10)
predict.test.rf <- predict(model.rf, newdata = testing.processed)
confusionMatrix(predict.test.rf, testing.processed$classe)
View(data.var)
quiz <- data.var[,vector.na.rm]
quiz <- quiz %>% select(-1:-7)
View(quiz)
predict.quiz.rf <- predict(model.rf, newdata = quiz)
quiz.pca.start <- select(quiz, -classe)
quiz <- data.var[,vector.na.rm]
quiz.pca.start <- quiz %>% select(-1:-7)
quiz.pca.fin <- predict(preProcess.PCA, newdata = quiz.pca.start)
predict.quiz.rf <- predict(model.rf, newdata = quiz.pca.fin)
predict.quiz.rf
dataset.url <- url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
quiz.url <- url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
download.file(dataset.url, "pml-training.csv")
download.file(dataset.url, "pml-training.csv")
?download.file
?getURL
?url
## Retrieve data
dataset.url <- url(https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv)
.url <- url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
quiz.url <- url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
download.file(quiz.url, pml-testing)
download.file(dataset.url, "pml.csv")
download.file(dataset.url, "pml-training.csv", mode = "wb")
## Retrieve data
dataset.url <- url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
## Retrieve data
dataset.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
quiz.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(dataset.url, "pml-training.csv", mode = "wb")
download.file(quiz.url, "pml-testing.csv", mode = "wb")
accuracy(predict.test.rf, testing.processed$classe)
library(caret)
accuracy(predict.test.rf, testing.processed$classe)
library(tidyverse)
library(caret)
library(randomForest)
## Retrieve data from server
dataset.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
quiz.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(dataset.url, "pml-training.csv", mode = "wb")
download.file(quiz.url, "pml-testing.csv", mode = "wb")
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
data.na.rm <- data.na.rm %>% select(-1:-7)
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
## Subset for PCA
training.pca.start <- select(training, -classe)
testing.pca.start <- select(testing,-classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca")
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Train Random Forest, LDA, and Boosted Models
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 10)
model.rpart <- train(classe ~ ., data = training.processed, method = "rpart")
## Make Predictions
predict.test.lda <- predict(model.lda, newdata = testing.processed)
predict.test.rf <- predict(model.rf, newdata = testing.processed)
predict.test.rpart <- predict(model.rpart, newdata = testing.processed)
## Compare against actuals
confusionMatrix(predict.test.lda, testing.processed$classe)
confusionMatrix(predict.test.rf, testing.processed$classe)
confusionMatrix(predict.test.rpart, testing.processed$classe)
library(tidyverse)
library(caret)
library(randomForest)
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
data.na.rm <- data.na.rm %>% select(-1:-7)
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
## Subset for PCA
training.pca.start <- select(training, -classe)
testing.pca.start <- select(testing,-classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca")
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Train Random Forest, LDA, and Boosted Models
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 10)
library(tidyverse)
library(caret)
library(randomForest)
## Determine which variables are of interest
data <- read_csv("pml-training.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
data.var <- read_csv("pml-testing.csv",
na = c("NA","#DIV/0!","Inf","-Inf",""))
vector.na.rm <- sapply(data.var, function(x){!any(is.na(x))})
data.na.rm <- data[,vector.na.rm]
data.na.rm <- data.na.rm %>% select(-1:-7)
## Create Training and Test datasets
set.seed(123)
inTrain <- createDataPartition(data.na.rm$classe, p = 0.75, list = FALSE)
training <- data.na.rm[inTrain,]
testing <- data.na.rm[-inTrain,]
## Subset for PCA
training.pca.start <- select(training, -classe)
testing.pca.start <- select(testing,-classe)
## Train PCA model
preProcess.PCA <- preProcess(training.pca.start, method = "pca")
## Predict PCA
training.pca.fin <- predict(preProcess.PCA, newdata = training.pca.start)
testing.pca.fin <- predict(preProcess.PCA, newdata = testing.pca.start)
## Add "classe" back to PCA datasets
training.processed <- cbind(training.pca.fin, "classe" =  training$classe)
testing.processed <- cbind(testing.pca.fin, "classe" = testing$classe)
## Train Random Forest, LDA, and Boosted Models
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 10)
?confusionMatrix
confusionMatrix(predict.test.rpart, testing.processed$classe)[1]
confusionMatrix(predict.test.rpart, testing.processed$classe)
confusionMatrix(predict.test.rpart, testing.processed$classe)
confusionMatrix(predict.test.rpart, testing.processed$classe)[[2]]
confusionMatrix(predict.test.rpart, testing.processed$classe)[[3]]
confusionMatrix(predict.test.rpart, testing.processed$classe)
confusionMatrix(predict.test.rf, testing.processed$classe)
model.lda <- train(classe ~ ., data = training.processed, method = "lda" )
model.rf <- randomForest(classe ~., data = training.processed, n.tree = 10)
model.rpart <- train(classe ~ ., data = training.processed, method = "rpart")
confusionMatrix(predict.test.rf, testing.processed$classe)$1
confusionMatrix(predict.test.rf, testing.processed$classe)[[1]]
confusionMatrix(predict.test.rf, testing.processed$classe)[[2]]
predict.test.lda <- predict(model.lda, newdata = testing.processed)
predict.test.rf <- predict(model.rf, newdata = testing.processed)
predict.test.rpart <- predict(model.rpart, newdata = testing.processed)
confusionMatrix(predict.test.rf, testing.processed$classe)[[2]]
confusionMatrix(predict.test.rf, testing.processed$classe)[[3]]
setwd("~/datasciencecoursera")
setwd("~/datasciencecoursera/PMLCourseProject")
knit_with_parameters('~/datasciencecoursera/PMLCourseProject/PMLCourseProject.rmd')
